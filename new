import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
import "bootstrap-icons/font/bootstrap-icons.css";

export default function App() {
  const collections = [
    { id: "school", name: "School", icon: "ðŸŽ’" },
    { id: "personal", name: "Personal", icon: "ðŸ‘¤" },
    { id: "design", name: "Design", icon: "ðŸŽ¨" },
  ];

  const [selected, setSelected] = useState("school");
  const [tasks, setTasks] = useState({
    school: { active: [], completed: [] },
    personal: { active: [], completed: [] },
    design: { active: [], completed: [] },
  });

  // For "Add a task" form state
  const [showAdd, setShowAdd] = useState(false);
  const [taskText, setTaskText] = useState("");
  const [taskDue, setTaskDue] = useState("Today");

  const addTask = () => {
    if (selected !== "school" || !taskText.trim()) return;
    const newActive = [
      ...tasks.school.active,
      { id: Date.now(), text: taskText.trim(), due: taskDue || "No due" },
    ];
    setTasks({
      ...tasks,
      school: { active: newActive, completed: tasks.school.completed },
    });
    setTaskText("");
    setTaskDue("Today");
    setShowAdd(false);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") addTask();
    if (e.key === "Escape") setShowAdd(false);
  };

  const toggleTask = (taskId, completed) => {
    if (selected !== "school") return;
    let active = tasks.school.active;
    let completedList = tasks.school.completed;
    if (completed) {
      const task = completedList.find((t) => t.id === taskId);
      completedList = completedList.filter((t) => t.id !== taskId);
      active = [...active, task];
    } else {
      const task = active.find((t) => t.id === taskId);
      active = active.filter((t) => t.id !== taskId);
      completedList = [...completedList, task];
    }
    setTasks({
      ...tasks,
      school: { active, completed: completedList },
    });
  };

  const dueColor = (due) => {
    const d = due.toLowerCase();
    if (d === "today") return "text-warning";
    if (d === "tomorrow") return "text-info";
    if (["monday", "thursday"].includes(d)) return "text-success";
    if (d === "yesterday") return "text-muted";
    return "text-secondary";
  };

  const renderTasks = (list, completed) => {
    if (!tasks[selected][list].length)
      return <p className="text-muted">No {list} tasks</p>;
    return tasks[selected][list].map((task) => (
      <div
        key={task.id}
        className="p-3 mb-2 rounded"
        style={{
          background: completed ? "#333" : "#222",
          wordBreak: "break-word",
          whiteSpace: "normal",
        }}
      >
        <div className="d-flex align-items-center">
          <i
            className={`bi ${completed ? "bi-check-circle-fill" : "bi-circle"} me-2`}
            style={{
              color: "#ff69b4",
              fontSize: "1.2rem",
              cursor: "pointer",
            }}
            onClick={() => toggleTask(task.id, completed)}
          ></i>
          <span
            style={{
              textDecoration: completed ? "line-through" : "none",
              color: completed ? "#bbb" : "#fff",
            }}
          >
            {task.text}
          </span>
        </div>
        <small className={`${dueColor(task.due)} ms-4`}>{task.due}</small>
      </div>
    ));
  };

  // Add a task form or button
  const AddTaskArea = () =>
    showAdd ? (
      <div className="mb-4 d-flex align-items-center" style={{ gap: 8 }}>
        <input
          type="text"
          className="form-control"
          autoFocus
          style={{
            maxWidth: 220,
            background: "#222",
            color: "#fff",
            border: 0,
          }}
          placeholder="Task title"
          value={taskText}
          onChange={(e) => setTaskText(e.target.value)}
          onKeyDown={handleKeyDown}
        />
        <select
          className="form-select"
          style={{
            maxWidth: 140,
            background: "#222",
            color: "#fff",
            border: 0,
          }}
          value={taskDue}
          onChange={(e) => setTaskDue(e.target.value)}
        >
          <option>Today</option>
          <option>Tomorrow</option>
          <option>Monday</option>
          <option>Thursday</option>
          <option>Yesterday</option>
          <option>No due</option>
        </select>
        <button
          className="btn"
          style={{ color: "#ff69b4" }}
          onClick={addTask}
          tabIndex={0}
        >
          <span style={{ fontSize: "1.2rem" }}>âž•</span> Add
        </button>
        <button
          className="btn"
          style={{ color: "#aaa" }}
          onClick={() => setShowAdd(false)}
        >
          Cancel
        </button>
      </div>
    ) : (
      <button
        className="btn mb-4 d-flex align-items-center"
        style={{ color: "#ff69b4" }}
        onClick={() => setShowAdd(true)}
      >
        <span style={{ fontSize: "1.2rem" }}>âž•</span>
        <span className="ms-2">Add a task</span>
      </button>
    );

  const MainContent = () => {
    if (selected !== "school")
      return (
        <div>
          <p className="text-muted">No tasks here</p>
        </div>
      );

    return (
      <div>
        <h4 className="fw-bold mb-3">
          {collections.find((c) => c.id === selected).name}
        </h4>
        {/* Add a task button/form */}
        <AddTaskArea />
        <h6 className="mb-3">Tasks â€“ {tasks.school.active.length}</h6>
        {renderTasks("active", false)}
        <h6 className="mt-4 mb-3">Completed â€“ {tasks.school.completed.length}</h6>
        {renderTasks("completed", true)}
      </div>
    );
  };

  const Sidebar = ({ isMobile }) => (
    <div
      className={
        isMobile
          ? "offcanvas offcanvas-start bg-secondary text-light"
          : "col-md-3 col-lg-2 bg-secondary p-3"
      }
      tabIndex={-1}
      id={isMobile ? "sidebar" : undefined}
      style={!isMobile ? { minHeight: "100vh" } : {}}
    >
      {isMobile ? (
        <>
          <div className="offcanvas-header">
            <h5 className="offcanvas-title">Collections</h5>
            <button
              type="button"
              className="btn-close btn-close-white"
              data-bs-dismiss="offcanvas"
            ></button>
          </div>
          <div className="offcanvas-body p-0">
            <ul className="nav nav-pills flex-column p-3">
              {collections.map((c) => (
                <li key={c.id} className="nav-item mb-2">
                  <button
                    className={`nav-link d-flex align-items-center ${
                      selected === c.id ? "active" : "text-light"
                    }`}
                    onClick={() => setSelected(c.id)}
                    data-bs-dismiss="offcanvas"
                  >
                    <span className="me-2" style={{ fontSize: "1.2rem" }}>
                      {c.icon}
                    </span>
                    {c.name}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </>
      ) : (
        <>
          <h5 className="fw-bold mb-3">Collections</h5>
          <ul className="nav nav-pills flex-column">
            {collections.map((c) => (
              <li key={c.id} className="nav-item mb-2">
                <button
                  className={`nav-link d-flex align-items-center ${
                    selected === c.id ? "active" : "text-light"
                  }`}
                  onClick={() => setSelected(c.id)}
                >
                  <span className="me-2" style={{ fontSize: "1.2rem" }}>
                    {c.icon}
                  </span>
                  {c.name}
                </button>
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );

  return (
    <div
      className="container-fluid bg-dark text-light min-vh-100 p-0 position-relative"
      style={{ overflowX: "hidden" }}
    >
      {/* Top gradient stripe */}
      <div
        style={{
          height: "6px",
          background: "linear-gradient(90deg,#ff69b4,#9b59b6)",
        }}
      ></div>
      <div className="d-none d-md-flex row gx-0" style={{ minHeight: "100vh" }}>
        <Sidebar />
        <div
          className="col d-flex justify-content-center align-items-start"
          style={{
            minHeight: "100vh",
          }}
        >
          <div style={{ width: "100%", maxWidth: "600px", margin: "40px 0" }}>
            <MainContent />
          </div>
        </div>
      </div>
      {/* Mobile layout */}
      <div
        className="d-flex d-md-none flex-row"
        style={{ minHeight: "100vh", width: "100%" }}
      >
        <button
          className="btn px-3 d-flex align-items-start"
          style={{
            color: "#ff69b4",
            background: "transparent",
            border: "none",
          }}
          type="button"
          data-bs-toggle="offcanvas"
          data-bs-target="#sidebar"
        >
          <i className="bi bi-list" style={{ fontSize: "2rem" }}></i>
        </button>
        <div
          className="flex-grow-1 px-3 py-4"
          style={{ minWidth: 0, width: "100%" }}
        >
          <MainContent />
        </div>
        <Sidebar isMobile />
      </div>
    </div>
  );
}
